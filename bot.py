import requests
import asyncio
import websockets
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STARTING_CAPITAL = 100
GRID_SIZE = 10
PART_CAPITAL = STARTING_CAPITAL / GRID_SIZE
ASSET_LIST = ['BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOT', 'DOGE', 'LTC', 'LINK']
BUY_THRESHOLD = 0.02  # 2% –¥–ª—è –ø–æ–∫—É–ø–∫–∏
SELL_THRESHOLD = 0.02  # 2% –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
portfolio = {}
account_balance = STARTING_CAPITAL


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
async def price_stream(symbol, callback):
    url = f"wss://stream.binance.com:9443/ws/{symbol.lower()}@ticker"
    async with websockets.connect(url) as websocket:
        while True:
            response = await websocket.recv()
            data = json.loads(response)
            current_price = float(data['c'])  # 'c' - —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            await callback(symbol, current_price)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
async def update_portfolio(symbol, current_price):
    global account_balance
    if symbol in portfolio:
        buy_price = portfolio[symbol]['buy_price']

        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        if portfolio[symbol]['amount'] == 0:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∫—É–ø–∏–ª–∏ –∞–∫—Ç–∏–≤
            if (buy_price - current_price) / buy_price >= BUY_THRESHOLD:  # –£—Å–ª–æ–≤–∏–µ –ø–æ–∫—É–ø–∫–∏
                amount_to_buy = PART_CAPITAL / current_price
                portfolio[symbol]['amount'] += amount_to_buy
                account_balance -= PART_CAPITAL
                print(f"–ö—É–ø–ª–µ–Ω–æ {amount_to_buy:.4f} {symbol}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${account_balance:.2f}")

        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏
        elif (current_price - buy_price) / buy_price >= SELL_THRESHOLD:  # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            account_balance += portfolio[symbol]['amount'] * current_price
            print(f"–ü—Ä–æ–¥–∞–Ω–æ {portfolio[symbol]['amount']:.4f} {symbol}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${account_balance:.2f}")
            portfolio[symbol]['amount'] = 0


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ REST API (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å WebSocket)
def get_current_price(asset):
    url = f'https://api1.binance.com/api/v3/ticker/price?symbol={asset}USDT'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        data = response.json()

        if 'price' in data:
            return float(data['price'])
        else:
            print(f"–û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'price' –¥–ª—è –∞–∫—Ç–∏–≤–∞ {asset}.")
            return None
    except requests.exceptions.HTTPError as e:
        print(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞ {asset}: {e}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞ {asset}: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ (–º–æ–∂–Ω–æ –¥–æ 3): " + ', '.join(ASSET_LIST))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /select
async def select_asset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ü—Ä–∏–º–µ—Ä: /select BTC ETH ADA.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–æ 3 –∞–∫—Ç–∏–≤–æ–≤
    if len(context.args) > 3:
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 3 –∞–∫—Ç–∏–≤–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")
        return

    selected_assets = []
    for asset in context.args:
        asset = asset.upper()
        if asset in ASSET_LIST:
            selected_assets.append(asset)
            portfolio[asset] = {'buy_price': None, 'amount': 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        else:
            await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–∫—Ç–∏–≤: {asset}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: " + ', '.join(ASSET_LIST))

    if selected_assets:
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤—ã: {', '.join(selected_assets)}.")
    else:
        await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /show
async def show_selected_assets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not portfolio:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞.")
        return

    selected_assets = ', '.join(portfolio.keys())
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {selected_assets}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove
async def remove_asset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /remove BTC.")
        return

    removed_assets = []
    for asset in context.args:
        asset = asset.upper()
        if asset in portfolio:
            del portfolio[asset]  # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            removed_assets.append(asset)
        else:
            await update.message.reply_text(f"–ê–∫—Ç–∏–≤ {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")

    if removed_assets:
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω—ã –∞–∫—Ç–∏–≤—ã: {', '.join(removed_assets)}.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞.")

# –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
async def trade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global account_balance
    print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π: ${account_balance:.2f}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

    for asset in portfolio:
        current_price = get_current_price(asset)

        if current_price is None:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {asset}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤.")
            continue

        previous_price = portfolio[asset].get('previous_price', current_price)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é
        portfolio[asset]['previous_price'] = current_price  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–µ–∫—É—â—É—é

        if current_price < previous_price:
            account_balance -= 10  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç –Ω–∞ $10, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞
            print(f"–¶–µ–Ω–∞ {asset} —É–ø–∞–ª–∞. –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç –Ω–∞ $10.")
            await update.message.reply_text(f"üîª –¶–µ–Ω–∞ {asset} —É–ø–∞–ª–∞ –¥–æ ${current_price:.2f}. –°—á–µ—Ç —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ $10.")
        elif current_price > previous_price:
            account_balance += 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –Ω–∞ $10, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞
            print(f"–¶–µ–Ω–∞ {asset} –ø–æ–≤—ã—Å–∏–ª–∞—Å—å. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –Ω–∞ $10.")
            await update.message.reply_text(f"üî∫ –¶–µ–Ω–∞ {asset} –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –¥–æ ${current_price:.2f}. –°—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ $10.")

    # –í—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    await update.message.reply_text(f"üíº –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç–∞: ${account_balance:.2f}")
    print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${account_balance:.2f}")  # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token("–í–ê–® –¢–û–ö–ï–ù –¢–ì").build()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("select", select_asset))
    application.add_handler(CommandHandler("trade", trade))
    application.add_handler(CommandHandler("show", show_selected_assets))
    application.add_handler(CommandHandler("remove", remove_asset))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
